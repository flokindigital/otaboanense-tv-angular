(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng2-adsense', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ng2-adsense'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var ADSENSE_TOKEN = new core.InjectionToken('AdsenseConfig');

    var AdsenseComponent = /** @class */ (function () {
        function AdsenseComponent(config) {
            this.config = config;
            /** can be manually set if you need all ads on a page to have same id page-xxx */
            this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
        }
        AdsenseComponent.prototype.ngOnInit = function () {
            var config = this.config;
            function use(source, defaultValue) {
                return config && source !== undefined ? source : defaultValue;
            }
            this.adClient = use(this.adClient, config.adClient);
            this.adSlot = use(this.adSlot, config.adSlot);
            this.adFormat = use(this.adFormat, config.adFormat || 'auto');
            this.display = use(this.display, config.display || 'block');
            this.width = use(this.width, config.width);
            this.height = use(this.height, config.height);
            this.layout = use(this.layout, config.layout);
            this.layoutKey = use(this.layoutKey, config.layoutKey);
            this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
            this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
            this.adtest = use(this.adtest, config.adtest);
            this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
        };
        AdsenseComponent.prototype.ngOnDestroy = function () {
            var iframe = this.ins.nativeElement.querySelector('iframe');
            if (iframe && iframe.contentWindow) {
                iframe.src = 'about:blank';
                iframe.remove();
            }
        };
        /**
         * attempts to push the ad twice. Usually if one doesn't work the other
         * will depeding on if the browser has the adsense code cached and
         * if its the first page to be loaded
         */
        AdsenseComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var res = this.push();
            if (res instanceof TypeError) {
                setTimeout(function () { return _this.push(); }, this.timeOutRetry);
            }
        };
        AdsenseComponent.prototype.push = function () {
            var p = {};
            if (this.pageLevelAds) {
                p.google_ad_client = this.adClient;
                p.enable_page_level_ads = true;
            }
            try {
                var adsbygoogle = window.adsbygoogle;
                adsbygoogle.push(p);
                return true;
            }
            catch (e) {
                return e;
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AdsenseComponent.prototype, "adClient", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AdsenseComponent.prototype, "adSlot", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AdsenseComponent.prototype, "adFormat", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AdsenseComponent.prototype, "adRegion", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AdsenseComponent.prototype, "display", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], AdsenseComponent.prototype, "width", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], AdsenseComponent.prototype, "height", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AdsenseComponent.prototype, "layout", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AdsenseComponent.prototype, "layoutKey", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AdsenseComponent.prototype, "pageLevelAds", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], AdsenseComponent.prototype, "timeOutRetry", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AdsenseComponent.prototype, "adtest", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], AdsenseComponent.prototype, "fullWidthResponsive", void 0);
        __decorate([
            core.ViewChild('ins', { read: core.ElementRef }),
            __metadata("design:type", Object)
        ], AdsenseComponent.prototype, "ins", void 0);
        AdsenseComponent = __decorate([
            core.Component({
                selector: 'ng2-adsense,ng-adsense',
                template: "\n  <ins #ins class=\"adsbygoogle\"\n    [style.display]=\"display\"\n    [style.width.px]=\"width\"\n    [style.height.px]=\"height\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-adtest]=\"adtest\"\n    [attr.data-layout-key]=\"layoutKey\"\n    [attr.data-full-width-responsive]=\"fullWidthResponsive\">\n  </ins>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __param(0, core.Inject(ADSENSE_TOKEN)),
            __metadata("design:paramtypes", [Object])
        ], AdsenseComponent);
        return AdsenseComponent;
    }());

    var AdsenseModule = /** @class */ (function () {
        function AdsenseModule() {
        }
        AdsenseModule_1 = AdsenseModule;
        AdsenseModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: AdsenseModule_1,
                providers: [{ provide: ADSENSE_TOKEN, useValue: config }],
            };
        };
        var AdsenseModule_1;
        AdsenseModule = AdsenseModule_1 = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                exports: [AdsenseComponent],
                declarations: [AdsenseComponent],
            })
        ], AdsenseModule);
        return AdsenseModule;
    }());

    exports.ADSENSE_TOKEN = ADSENSE_TOKEN;
    exports.AdsenseComponent = AdsenseComponent;
    exports.AdsenseModule = AdsenseModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng2-adsense.umd.js.map
