import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild, } from '@angular/core';
import { ADSENSE_TOKEN } from './adsense-config';
var AdsenseComponent = /** @class */ (function () {
    function AdsenseComponent(config) {
        this.config = config;
        /** can be manually set if you need all ads on a page to have same id page-xxx */
        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
    }
    AdsenseComponent.prototype.ngOnInit = function () {
        var config = this.config;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.adClient = use(this.adClient, config.adClient);
        this.adSlot = use(this.adSlot, config.adSlot);
        this.adFormat = use(this.adFormat, config.adFormat || 'auto');
        this.display = use(this.display, config.display || 'block');
        this.width = use(this.width, config.width);
        this.height = use(this.height, config.height);
        this.layout = use(this.layout, config.layout);
        this.layoutKey = use(this.layoutKey, config.layoutKey);
        this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
        this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
        this.adtest = use(this.adtest, config.adtest);
        this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
    };
    AdsenseComponent.prototype.ngOnDestroy = function () {
        var iframe = this.ins.nativeElement.querySelector('iframe');
        if (iframe && iframe.contentWindow) {
            iframe.src = 'about:blank';
            iframe.remove();
        }
    };
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     */
    AdsenseComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var res = this.push();
        if (res instanceof TypeError) {
            setTimeout(function () { return _this.push(); }, this.timeOutRetry);
        }
    };
    AdsenseComponent.prototype.push = function () {
        var p = {};
        if (this.pageLevelAds) {
            p.google_ad_client = this.adClient;
            p.enable_page_level_ads = true;
        }
        try {
            var adsbygoogle = window['adsbygoogle'];
            adsbygoogle.push(p);
            return true;
        }
        catch (e) {
            return e;
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "adClient", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], AdsenseComponent.prototype, "adSlot", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "adFormat", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], AdsenseComponent.prototype, "adRegion", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "display", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AdsenseComponent.prototype, "width", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AdsenseComponent.prototype, "height", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "layout", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "layoutKey", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AdsenseComponent.prototype, "pageLevelAds", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], AdsenseComponent.prototype, "timeOutRetry", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], AdsenseComponent.prototype, "adtest", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], AdsenseComponent.prototype, "fullWidthResponsive", void 0);
    tslib_1.__decorate([
        ViewChild('ins'),
        tslib_1.__metadata("design:type", Object)
    ], AdsenseComponent.prototype, "ins", void 0);
    AdsenseComponent = tslib_1.__decorate([
        Component({
            selector: 'ng2-adsense,ng-adsense',
            template: "\n  <ins #ins class=\"adsbygoogle\"\n    [ngStyle]=\"{'display': display, 'width.px': width, 'height.px': height }\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-adtest]=\"adtest\"\n    [attr.data-layout-key]=\"layoutKey\"\n    [attr.data-full-width-responsive]=\"fullWidthResponsive\">\n  </ins>\n  ",
            preserveWhitespaces: false,
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__param(0, Inject(ADSENSE_TOKEN)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], AdsenseComponent);
    return AdsenseComponent;
}());
export { AdsenseComponent };
//# sourceMappingURL=data:application/json;base64,